<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<title>Plataforma 2D com Agachar e Descer Plataformas</title>
<style>
    body {
        margin: 0;
        background: #222;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
    canvas {
        background: #87ceeb;
        border: 2px solid black;
    }
</style>
</head>
<body>

<canvas id="gameCanvas" width="800" height="400"></canvas>

<script>
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// VariÃ¡veis do jogo
let score = 0;
let gameOver = false;

// Jogador
const player = {
    x: 50,
    y: 300,
    width: 40,
    height: 40,
    color: "red",
    dx: 0,
    dy: 0,
    speed: 4,
    jumpForce: 12,
    onGround: false,
    jumpCount: 0,
    dropTimeout: 0  // tempo para ignorar plataforma ao descer
};

// Gravidade
const gravity = 0.6;

// CÃ¢mera
let cameraX = 0;

// Plataformas (para as plataformas finas que dÃ¡ pra descer, vamos marcar elas)
const platforms = [
    { x: 0, y: 350, width: 2000, height: 50, canDrop: false },
    { x: 200, y: 280, width: 100, height: 20, canDrop: true },
    { x: 400, y: 200, width: 150, height: 20, canDrop: true },
    { x: 700, y: 150, width: 100, height: 20, canDrop: true },
    { x: 1000, y: 300, width: 150, height: 20, canDrop: false },
    { x: 1400, y: 250, width: 120, height: 20, canDrop: true },
    { x: 1800, y: 200, width: 100, height: 20, canDrop: true }
];

// Moedas
const coins = [
    { x: 210, y: 250, collected: false },
    { x: 420, y: 170, collected: false },
    { x: 710, y: 120, collected: false },
    { x: 1020, y: 270, collected: false },
    { x: 1420, y: 220, collected: false },
    { x: 1820, y: 170, collected: false }
];

// Inimigos
const enemies = [
    { x: 600, y: 330, width: 30, height: 30, dx: 1 },
    { x: 1500, y: 230, width: 30, height: 30, dx: 1 }
];

// Controles
const keys = {};
document.addEventListener("keydown", e => keys[e.code] = true);
document.addEventListener("keyup", e => keys[e.code] = false);

function update() {
    if (gameOver) return;

    // Movimento horizontal com A e D
    player.dx = 0;
    if (keys["KeyD"]) player.dx = player.speed;  // Direita
    if (keys["KeyA"]) player.dx = -player.speed; // Esquerda

    // Pulo duplo com W
    if (keys["KeyW"]) {
        if (!player.jumpPressed) {
            if (player.onGround || player.jumpCount < 2) {
                player.dy = -player.jumpForce;
                player.onGround = false;
                player.jumpCount++;
            }
        }
        player.jumpPressed = true;
    } else {
        player.jumpPressed = false;
    }

    // Agachar / descer plataforma com S
    if (keys["KeyS"] && player.onGround) {
        // Verifica se em cima de plataforma que permite drop
        for (let p of platforms) {
            if (p.canDrop &&
                player.x < p.x + p.width &&
                player.x + player.width > p.x &&
                Math.abs(player.y + player.height - p.y) < 5) {
                // Ativa o timer para ignorar colisÃ£o da plataforma atual
                player.dropTimeout = 15; // frames que ignora colisÃ£o (~0.25s)
                player.onGround = false; // solta o jogador no ar
                break;
            }
        }
    }

    // Gravidade
    player.dy += gravity;

    // Atualizar posiÃ§Ã£o
    player.x += player.dx;
    player.y += player.dy;

    // ColisÃ£o com plataformas (ignora plataformas se dropTimeout ativo)
    player.onGround = false;
    for (let p of platforms) {
        if (
            player.x < p.x + p.width &&
            player.x + player.width > p.x &&
            player.y + player.height >= p.y - 5 &&
            player.y + player.height <= p.y + 15 &&
            player.dy >= 0
        ) {
            // Ignorar plataforma se dropTimeout ativo e for a plataforma que estÃ¡
            if (player.dropTimeout > 0 && p.canDrop &&
                player.x < p.x + p.width &&
                player.x + player.width > p.x &&
                Math.abs(player.y + player.height - p.y) < 15) {
                // Ignorar essa plataforma no momento
                continue;
            }

            player.y = p.y - player.height;
            player.dy = 0;
            player.onGround = true;
            player.jumpCount = 0;
            player.dropTimeout = 0; // resetar timeout quando pousar
        }
    }

    // Decrementa dropTimeout se ativo
    if (player.dropTimeout > 0) player.dropTimeout--;

    // Coletar moedas
    for (let coin of coins) {
        if (!coin.collected &&
            player.x < coin.x + 20 &&
            player.x + player.width > coin.x &&
            player.y < coin.y + 20 &&
            player.y + player.height > coin.y) {
            
            coin.collected = true;
            score += 10;
        }
    }

    // Movimento de inimigos
    for (let e of enemies) {
        e.x += e.dx;
        if (e.x < 580 || e.x > 650) e.dx *= -1;

        if (player.x < e.x + e.width &&
            player.x + player.width > e.x &&
            player.y < e.y + e.height &&
            player.y + player.height > e.y) {
            gameOver = true;
        }
    }

    // CÃ¢mera segue o jogador
    cameraX = player.x - canvas.width / 2;

    // VitÃ³ria
    if (player.x > 1900) {
        gameOver = true;
        score += 50;
    }

    // ReinÃ­cio se cair
    if (player.y > canvas.height) {
        player.x = 50;
        player.y = 300;
        player.dy = 0;
        cameraX = 0;
        score = 0;
        player.jumpCount = 0;
        player.dropTimeout = 0;
        gameOver = false;
    }
}

function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.save();
    ctx.translate(-cameraX, 0);

    // Plataformas
    ctx.fillStyle = "green";
    for (let p of platforms) {
        ctx.fillRect(p.x, p.y, p.width, p.height);
    }

    // Moedas
    for (let coin of coins) {
        if (!coin.collected) {
            ctx.beginPath();
            ctx.arc(coin.x + 10, coin.y + 10, 10, 0, Math.PI * 2);
            ctx.fillStyle = "gold";
            ctx.fill();
        }
    }

    // Inimigos
    ctx.fillStyle = "purple";
    for (let e of enemies) {
        ctx.fillRect(e.x, e.y, e.width, e.height);
    }

    // Jogador
    ctx.fillStyle = player.color;
    ctx.fillRect(player.x, player.y, player.width, player.height);

    ctx.restore();

    // HUD
    ctx.fillStyle = "black";
    ctx.font = "20px Arial";
    ctx.fillText("PontuaÃ§Ã£o: " + score, 10, 20);

    if (gameOver) {
        ctx.fillStyle = "black";
        ctx.font = "40px Arial";
        ctx.fillText(player.x > 1900 ? "VocÃª Venceu! ðŸŽ‰" : "Game Over ðŸ’€", canvas.width / 2 - 100, canvas.height / 2);
    }
}

function loop() {
    update();
    draw();
    requestAnimationFrame(loop);
}

loop();
</script>

</body>
</html>
